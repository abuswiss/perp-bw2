'use client';

import { useState, useEffect, useCallback } from 'react';
import { Download, Copy, Save, FileText, CheckCircle, AlertCircle } from 'lucide-react';
import { jsPDF } from 'jspdf';
import { useMatter } from '@/contexts/MatterContext';

interface AgentResultActionsProps {
  content: string;
  agentType: string;
  taskId?: string;
  autoSave?: boolean;
}

const AgentResultActions = ({ 
  content, 
  agentType, 
  taskId,
  autoSave = true 
}: AgentResultActionsProps) => {
  const { currentMatter } = useMatter();
  const [copied, setCopied] = useState(false);
  const [saving, setSaving] = useState(false);
  const [autoSaved, setAutoSaved] = useState(false);
  const [autoSaveError, setAutoSaveError] = useState<string | null>(null);

  const generateDocumentTitle = (agentType: string, taskId?: string) => {
    const agentTypeMap: Record<string, string> = {
      'research': 'Legal Research Report',
      'brief-writing': 'Legal Brief',
      'discovery': 'Discovery Review Report',
      'contract': 'Contract Analysis Report'
    };
    
    const baseTitle = agentTypeMap[agentType] || 'AI Generated Document';
    const timestamp = new Date().toISOString().slice(0, 10);
    const taskSuffix = taskId ? ` (Task ${taskId.slice(-6)})` : '';
    
    return `${baseTitle} - ${timestamp}${taskSuffix}`;
  };

  const getDocumentType = (agentType: string) => {
    const typeMap: Record<string, string> = {
      'research': 'research_report',
      'brief-writing': 'brief',
      'discovery': 'discovery_report',
      'contract': 'contract_analysis'
    };
    
    return typeMap[agentType] || 'ai_generated';
  };

  const performAutoSave = useCallback(async () => {
    if (!currentMatter || autoSaved || saving || !content.trim()) return;
    
    setSaving(true);
    setAutoSaveError(null);
    
    try {
      const title = generateDocumentTitle(agentType, taskId);
      const documentType = getDocumentType(agentType);
      
      const response = await fetch('/api/documents', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: title,
          content: content,
          documentType: documentType,
          matterId: currentMatter.id,
          metadata: {
            autoGenerated: true,
            generatedAt: new Date().toISOString(),
            source: 'ai_agent',
            agentType: agentType,
            taskId: taskId || null,
            wordCount: content.split(/\s+/).length,
            generatedBy: 'BenchWise AI Assistant'
          }
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to save document');
      }

      const result = await response.json();
      setAutoSaved(true);
      console.log('Agent result auto-saved successfully:', result.id);
      
    } catch (error) {
      console.error('Auto-save failed:', error);
      setAutoSaveError(error instanceof Error ? error.message : 'Auto-save failed');
    } finally {
      setSaving(false);
    }
  }, [currentMatter, autoSaved, saving, content, agentType, taskId]);

  // Auto-save effect for agent results
  useEffect(() => {
    if (autoSave && content && !autoSaved && currentMatter && !saving) {
      const timer = setTimeout(async () => {
        await performAutoSave();
      }, 3000); // Auto-save after 3 seconds for agent results
      
      return () => clearTimeout(timer);
    }
  }, [autoSave, content, autoSaved, currentMatter, saving, performAutoSave]);

  const handleManualSave = async () => {
    if (!currentMatter) {
      alert('Please select a matter to save this document.');
      return;
    }

    setSaving(true);
    setAutoSaveError(null);
    
    try {
      const title = generateDocumentTitle(agentType, taskId);
      const documentType = getDocumentType(agentType);
      
      const response = await fetch('/api/documents', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          title: title,
          content: content,
          documentType: documentType,
          matterId: currentMatter.id,
          metadata: {
            autoGenerated: false,
            generatedAt: new Date().toISOString(),
            source: 'ai_agent',
            agentType: agentType,
            taskId: taskId || null,
            wordCount: content.split(/\s+/).length,
            generatedBy: 'BenchWise AI Assistant',
            manuallySaved: true
          }
        }),
      });

      if (!response.ok) {
        const errorData = await response.json();
        throw new Error(errorData.message || 'Failed to save document');
      }

      const result = await response.json();
      alert('Document saved to library successfully!');
      console.log('Document manually saved:', result.id);
      
    } catch (error) {
      console.error('Manual save failed:', error);
      alert(`Failed to save document: ${error instanceof Error ? error.message : 'Unknown error'}`);
    } finally {
      setSaving(false);
    }
  };

  const copyToClipboard = async () => {
    try {
      await navigator.clipboard.writeText(content);
      setCopied(true);
      setTimeout(() => setCopied(false), 2000);
    } catch (error) {
      console.error('Failed to copy:', error);
    }
  };

  const downloadAsPDF = () => {
    try {
      const pdf = new jsPDF();
      const title = generateDocumentTitle(agentType, taskId);
      
      // Set up margins and page dimensions
      const pageWidth = pdf.internal.pageSize.getWidth();
      const margin = 20;
      const maxWidth = pageWidth - 2 * margin;
      
      // Split content into lines that fit the page width
      const lines = pdf.splitTextToSize(content, maxWidth);
      
      // Add title
      pdf.setFontSize(16);
      pdf.setFont('helvetica', 'bold');
      pdf.text(title, margin, 30);
      
      // Add matter info if available
      if (currentMatter) {
        pdf.setFontSize(10);
        pdf.setFont('helvetica', 'normal');
        pdf.text(`Matter: ${currentMatter.name}`, margin, 40);
        pdf.text(`Generated: ${new Date().toLocaleString()}`, margin, 45);
      }
      
      // Add content
      pdf.setFontSize(12);
      pdf.setFont('helvetica', 'normal');
      
      let yPosition = currentMatter ? 60 : 50;
      const lineHeight = 7;
      const pageHeight = pdf.internal.pageSize.getHeight();
      
      lines.forEach((line: string) => {
        if (yPosition > pageHeight - margin) {
          pdf.addPage();
          yPosition = margin;
        }
        pdf.text(line, margin, yPosition);
        yPosition += lineHeight;
      });
      
      pdf.save(`${title.replace(/[^a-zA-Z0-9]/g, '_')}.pdf`);
    } catch (error) {
      console.error('Failed to generate PDF:', error);
      alert('Failed to generate PDF. Please try copying the text instead.');
    }
  };

  const downloadAsText = () => {
    const title = generateDocumentTitle(agentType, taskId);
    const blob = new Blob([content], { type: 'text/plain' });
    const url = URL.createObjectURL(blob);
    const a = document.createElement('a');
    a.href = url;
    a.download = `${title.replace(/[^a-zA-Z0-9]/g, '_')}.txt`;
    document.body.appendChild(a);
    a.click();
    document.body.removeChild(a);
    URL.revokeObjectURL(url);
  };

  return (
    <div className="bg-light-100 dark:bg-dark-100 rounded-lg p-4 mt-4 border border-light-200 dark:border-dark-200">
      <div className="flex items-center justify-between mb-3">
        <div className="flex items-center space-x-2">
          <FileText size={20} className="text-[#24A0ED]" />
          <h3 className="text-sm font-medium text-black dark:text-white">
            Agent Result Actions
          </h3>
        </div>
        <div className="flex items-center gap-2">
          {saving && (
            <div className="flex items-center gap-1 text-blue-600 dark:text-blue-400 text-xs">
              <div className="animate-spin h-3 w-3 border-2 border-blue-600 border-t-transparent rounded-full"></div>
              <span>Saving...</span>
            </div>
          )}
          {autoSaved && !saving && (
            <div className="flex items-center gap-1 text-green-600 dark:text-green-400 text-xs">
              <CheckCircle size={14} />
              <span>Auto-saved to library</span>
            </div>
          )}
          {autoSaveError && (
            <div className="flex items-center gap-1 text-red-600 dark:text-red-400 text-xs">
              <AlertCircle size={14} />
              <span>Auto-save failed</span>
            </div>
          )}
        </div>
      </div>
      
      <div className="flex flex-wrap gap-2">
        <button
          onClick={copyToClipboard}
          className="flex items-center space-x-2 px-3 py-2 bg-white dark:bg-dark-200 hover:bg-light-200 dark:hover:bg-dark-300 rounded-md text-sm transition-colors border border-light-300 dark:border-dark-300"
        >
          <Copy size={16} />
          <span>{copied ? 'Copied!' : 'Copy Text'}</span>
        </button>
        
        <button
          onClick={downloadAsPDF}
          className="flex items-center space-x-2 px-3 py-2 bg-white dark:bg-dark-200 hover:bg-light-200 dark:hover:bg-dark-300 rounded-md text-sm transition-colors border border-light-300 dark:border-dark-300"
        >
          <Download size={16} />
          <span>Download PDF</span>
        </button>
        
        <button
          onClick={downloadAsText}
          className="flex items-center space-x-2 px-3 py-2 bg-white dark:bg-dark-200 hover:bg-light-200 dark:hover:bg-dark-300 rounded-md text-sm transition-colors border border-light-300 dark:border-dark-300"
        >
          <Download size={16} />
          <span>Download Text</span>
        </button>
        
        {(!autoSaved || autoSaveError) && (
          <button
            onClick={handleManualSave}
            disabled={saving || !currentMatter}
            className="flex items-center space-x-2 px-3 py-2 bg-[#24A0ED] hover:bg-[#1e8fd4] text-white rounded-md text-sm transition-colors disabled:opacity-50"
          >
            <Save size={16} />
            <span>{saving ? 'Saving...' : 'Save to Library'}</span>
          </button>
        )}
      </div>

      {/* Matter context info */}
      {currentMatter && (
        <div className="mt-3 pt-3 border-t border-light-300 dark:border-dark-300">
          <p className="text-xs text-gray-600 dark:text-gray-400">
            This document will be saved to: <span className="font-medium">{currentMatter.name}</span>
          </p>
        </div>
      )}

      {!currentMatter && (
        <div className="mt-3 pt-3 border-t border-light-300 dark:border-dark-300">
          <p className="text-xs text-yellow-600 dark:text-yellow-400">
            ⚠️ No matter selected. Document cannot be auto-saved to library.
          </p>
        </div>
      )}
    </div>
  );
};

export default AgentResultActions;