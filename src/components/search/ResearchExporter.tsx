'use client';

import { useState } from 'react';
import { 
  Download, 
  FileText, 
  File, 
  BookOpen,
  ClipboardList,
  Calendar,
  User,
  Scale,
  Loader2
} from 'lucide-react';
import { jsPDF } from 'jspdf';
import { useMatter } from '@/contexts/MatterContext';

interface ResearchData {
  query: string;
  summary: string;
  sources: any[];
  cases: any[];
  statutes: any[];
  analysis?: string;
  citations: any[];
  timestamp: string;
  matterId?: string;
}

interface ResearchExporterProps {
  researchData: ResearchData;
  title?: string;
  onExport?: (format: string) => void;
}

const ResearchExporter = ({ 
  researchData, 
  title = 'Legal Research Report',
  onExport 
}: ResearchExporterProps) => {
  const { currentMatter } = useMatter();
  const [isExporting, setIsExporting] = useState(false);
  const [exportFormat, setExportFormat] = useState<string | null>(null);

  const generateMarkdownReport = (): string => {
    const now = new Date();
    const matterInfo = currentMatter ? `\n**Matter:** ${currentMatter.name}` : '';
    
    return `# ${title}

**Generated:** ${now.toLocaleString()}${matterInfo}
**Research Query:** ${researchData.query}

---

## Executive Summary

${researchData.summary || 'No summary available.'}

${researchData.analysis ? `## Legal Analysis\n\n${researchData.analysis}\n\n` : ''}

## Sources Overview

- **Total Sources:** ${researchData.sources.length}
- **Cases Found:** ${researchData.cases.length}
- **Statutes Found:** ${researchData.statutes.length}

---

## Case Law Results

${researchData.cases.length > 0 ? researchData.cases.map((caseItem, index) => `
### ${index + 1}. ${caseItem.case_name || caseItem.title}

**Citation:** ${caseItem.citation || 'Not available'}
**Court:** ${caseItem.court || 'Unknown'}
**Date:** ${caseItem.date || caseItem.decision_date || 'Unknown'}
${caseItem.url ? `**URL:** ${caseItem.url}` : ''}

${caseItem.summary || caseItem.snippet || 'No summary available.'}

${caseItem.key_points?.length ? `**Key Points:**\n${caseItem.key_points.map((point: string) => `- ${point}`).join('\n')}\n` : ''}

---
`).join('') : 'No cases found.\n\n---\n'}

## Statutory Authority

${researchData.statutes.length > 0 ? researchData.statutes.map((statute, index) => `
### ${index + 1}. ${statute.title}

${statute.citation ? `**Citation:** ${statute.citation}` : ''}
${statute.url ? `**URL:** ${statute.url}` : ''}

${statute.summary || statute.content?.substring(0, 500) || 'No content available.'}

---
`).join('') : 'No statutes found.\n\n---\n'}

## Additional Sources

${researchData.sources.filter(s => !s.case_name && !s.title?.includes('USC')).length > 0 ? 
  researchData.sources
    .filter(s => !s.case_name && !s.title?.includes('USC'))
    .map((source, index) => `
### ${index + 1}. ${source.title}

${source.url ? `**URL:** ${source.url}` : ''}

${source.content?.substring(0, 300) || 'No content available.'}

---
`).join('') : 'No additional sources found.\n\n---\n'}

## Citations

${researchData.citations.length > 0 ? researchData.citations.map((citation, index) => `
${index + 1}. ${citation.citation || citation.title}
`).join('') : 'No formal citations available.'}

---

*Generated by BenchWise Legal Research Platform*
*Timestamp: ${now.toISOString()}*
`;
  };

  const exportToMarkdown = async () => {
    setIsExporting(true);
    setExportFormat('markdown');
    
    try {
      const content = generateMarkdownReport();
      const blob = new Blob([content], { type: 'text/markdown' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `${title.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().slice(0, 10)}.md`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      onExport?.('markdown');
    } catch (error) {
      console.error('Error exporting to Markdown:', error);
    } finally {
      setIsExporting(false);
      setExportFormat(null);
    }
  };

  const exportToPDF = async () => {
    setIsExporting(true);
    setExportFormat('pdf');
    
    try {
      const pdf = new jsPDF();
      const content = generateMarkdownReport();
      
      // Set up margins and dimensions
      const pageWidth = pdf.internal.pageSize.getWidth();
      const pageHeight = pdf.internal.pageSize.getHeight();
      const margin = 20;
      const maxWidth = pageWidth - 2 * margin;
      let yPosition = margin;
      
      // Add header
      pdf.setFontSize(18);
      pdf.setFont('helvetica', 'bold');
      pdf.text(title, margin, yPosition);
      yPosition += 15;
      
      // Add matter and date info
      pdf.setFontSize(10);
      pdf.setFont('helvetica', 'normal');
      if (currentMatter) {
        pdf.text(`Matter: ${currentMatter.name}`, margin, yPosition);
        yPosition += 8;
      }
      pdf.text(`Generated: ${new Date().toLocaleString()}`, margin, yPosition);
      yPosition += 8;
      pdf.text(`Query: ${researchData.query}`, margin, yPosition);
      yPosition += 15;
      
      // Process content sections
      const lines = content.split('\n');
      
      for (const line of lines) {
        // Check if we need a new page
        if (yPosition > pageHeight - margin) {
          pdf.addPage();
          yPosition = margin;
        }
        
        if (line.startsWith('# ')) {
          pdf.setFontSize(16);
          pdf.setFont('helvetica', 'bold');
          const text = line.replace('# ', '');
          pdf.text(text, margin, yPosition);
          yPosition += 12;
        } else if (line.startsWith('## ')) {
          pdf.setFontSize(14);
          pdf.setFont('helvetica', 'bold');
          const text = line.replace('## ', '');
          pdf.text(text, margin, yPosition);
          yPosition += 10;
        } else if (line.startsWith('### ')) {
          pdf.setFontSize(12);
          pdf.setFont('helvetica', 'bold');
          const text = line.replace('### ', '');
          pdf.text(text, margin, yPosition);
          yPosition += 8;
        } else if (line.startsWith('**') && line.endsWith('**')) {
          pdf.setFontSize(10);
          pdf.setFont('helvetica', 'bold');
          const text = line.replace(/\*\*/g, '');
          const wrappedText = pdf.splitTextToSize(text, maxWidth);
          pdf.text(wrappedText, margin, yPosition);
          yPosition += wrappedText.length * 6;
        } else if (line.trim() !== '' && !line.startsWith('---')) {
          pdf.setFontSize(10);
          pdf.setFont('helvetica', 'normal');
          const wrappedText = pdf.splitTextToSize(line, maxWidth);
          pdf.text(wrappedText, margin, yPosition);
          yPosition += wrappedText.length * 6;
        } else if (line.startsWith('---')) {
          yPosition += 5;
        }
        
        yPosition += 2;
      }
      
      pdf.save(`${title.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().slice(0, 10)}.pdf`);
      onExport?.('pdf');
    } catch (error) {
      console.error('Error exporting to PDF:', error);
    } finally {
      setIsExporting(false);
      setExportFormat(null);
    }
  };

  const exportToWord = async () => {
    setIsExporting(true);
    setExportFormat('word');
    
    try {
      const markdownContent = generateMarkdownReport();
      
      // Convert basic Markdown to RTF
      const rtfContent = markdownContent
        .replace(/^# (.+)$/gm, '{\\b\\fs28 $1}\\par\\par')
        .replace(/^## (.+)$/gm, '{\\b\\fs24 $1}\\par\\par')
        .replace(/^### (.+)$/gm, '{\\b\\fs20 $1}\\par')
        .replace(/\*\*(.+?)\*\*/g, '{\\b $1}')
        .replace(/\*(.+?)\*/g, '{\\i $1}')
        .replace(/^- (.+)$/gm, '\\bullet $1\\par')
        .replace(/\n/g, '\\par\n');

      const fullRtf = `{\\rtf1\\ansi\\deff0 {\\fonttbl {\\f0 Times New Roman;}}
\\f0\\fs24 ${rtfContent}
}`;

      const blob = new Blob([fullRtf], { type: 'application/rtf' });
      const url = URL.createObjectURL(blob);
      
      const a = document.createElement('a');
      a.href = url;
      a.download = `${title.replace(/[^a-zA-Z0-9]/g, '_')}_${new Date().toISOString().slice(0, 10)}.rtf`;
      document.body.appendChild(a);
      a.click();
      document.body.removeChild(a);
      URL.revokeObjectURL(url);
      
      onExport?.('word');
    } catch (error) {
      console.error('Error exporting to Word:', error);
    } finally {
      setIsExporting(false);
      setExportFormat(null);
    }
  };

  const copyToClipboard = async () => {
    setIsExporting(true);
    setExportFormat('clipboard');
    
    try {
      const content = generateMarkdownReport();
      await navigator.clipboard.writeText(content);
      onExport?.('clipboard');
    } catch (error) {
      console.error('Error copying to clipboard:', error);
    } finally {
      setIsExporting(false);
      setExportFormat(null);
    }
  };

  const exportOptions = [
    {
      id: 'pdf',
      label: 'Export as PDF',
      description: 'Professional document format',
      icon: <File className="w-5 h-5" />,
      action: exportToPDF,
      color: 'bg-white hover:bg-gray-50 text-gray-900 border-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 dark:text-white dark:border-gray-600'
    },
    {
      id: 'word',
      label: 'Export to Word',
      description: 'Editable document format (RTF)',
      icon: <FileText className="w-5 h-5" />,
      action: exportToWord,
      color: 'bg-white hover:bg-gray-50 text-gray-900 border-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 dark:text-white dark:border-gray-600'
    },
    {
      id: 'markdown',
      label: 'Export as Markdown',
      description: 'Plain text with formatting',
      icon: <BookOpen className="w-5 h-5" />,
      action: exportToMarkdown,
      color: 'bg-white hover:bg-gray-50 text-gray-900 border-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 dark:text-white dark:border-gray-600'
    },
    {
      id: 'clipboard',
      label: 'Copy to Clipboard',
      description: 'Copy formatted text',
      icon: <ClipboardList className="w-5 h-5" />,
      action: copyToClipboard,
      color: 'bg-white hover:bg-gray-50 text-gray-900 border-gray-200 dark:bg-gray-800 dark:hover:bg-gray-700 dark:text-white dark:border-gray-600'
    }
  ];

  return (
    <div className="space-y-4">
      <div className="flex items-center gap-2">
        <Download className="w-5 h-5 text-gray-600 dark:text-gray-400" />
        <h3 className="text-lg font-medium text-gray-900 dark:text-white">
          Export Research
        </h3>
      </div>

      {/* Research Summary */}
      <div className="bg-gray-50 dark:bg-gray-800 rounded-lg p-4">
        <div className="grid grid-cols-2 md:grid-cols-4 gap-4 text-sm">
          <div className="flex items-center gap-2">
            <Scale className="w-4 h-4 text-gray-600 dark:text-gray-400" />
            <span className="text-gray-600 dark:text-gray-400">
              {researchData.cases.length} Cases
            </span>
          </div>
          <div className="flex items-center gap-2">
            <FileText className="w-4 h-4 text-gray-600 dark:text-gray-400" />
            <span className="text-gray-600 dark:text-gray-400">
              {researchData.statutes.length} Statutes
            </span>
          </div>
          <div className="flex items-center gap-2">
            <BookOpen className="w-4 h-4 text-gray-600 dark:text-gray-400" />
            <span className="text-gray-600 dark:text-gray-400">
              {researchData.sources.length} Total Sources
            </span>
          </div>
          <div className="flex items-center gap-2">
            <Calendar className="w-4 h-4 text-gray-600 dark:text-gray-400" />
            <span className="text-gray-600 dark:text-gray-400">
              {new Date(researchData.timestamp).toLocaleDateString()}
            </span>
          </div>
        </div>
      </div>

      {/* Export Options */}
      <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
        {exportOptions.map((option) => (
          <button
            key={option.id}
            onClick={option.action}
            disabled={isExporting}
            className={`p-4 rounded-lg border transition-all duration-200 ${option.color} ${
              isExporting && exportFormat === option.id 
                ? 'opacity-75 cursor-not-allowed' 
                : 'hover:shadow-md'
            }`}
          >
            <div className="flex items-center gap-3">
              {isExporting && exportFormat === option.id ? (
                <Loader2 className="w-5 h-5 animate-spin" />
              ) : (
                option.icon
              )}
              <div className="text-left">
                <div className="font-medium">{option.label}</div>
                <div className="text-sm opacity-75">{option.description}</div>
              </div>
            </div>
          </button>
        ))}
      </div>

      {/* Matter Context */}
      {currentMatter && (
        <div className="text-sm text-gray-600 dark:text-gray-400 bg-blue-50 dark:bg-blue-900/20 rounded-lg p-3">
          <div className="flex items-center gap-2">
            <User className="w-4 h-4" />
            <span>
              This research will be exported with matter context: <strong>{currentMatter.name}</strong>
            </span>
          </div>
        </div>
      )}
    </div>
  );
};

export default ResearchExporter;